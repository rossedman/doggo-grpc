// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/doggo.proto

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	pb/doggo.proto

It has these top-level messages:
	Doggo
	GetAllRequest
	GetByIdRequest
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Doggo struct {
	Id     int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Breed  string `protobuf:"bytes,3,opt,name=breed" json:"breed,omitempty"`
	IsGood bool   `protobuf:"varint,4,opt,name=isGood" json:"isGood,omitempty"`
}

func (m *Doggo) Reset()                    { *m = Doggo{} }
func (m *Doggo) String() string            { return proto.CompactTextString(m) }
func (*Doggo) ProtoMessage()               {}
func (*Doggo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Doggo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Doggo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Doggo) GetBreed() string {
	if m != nil {
		return m.Breed
	}
	return ""
}

func (m *Doggo) GetIsGood() bool {
	if m != nil {
		return m.IsGood
	}
	return false
}

type GetAllRequest struct {
}

func (m *GetAllRequest) Reset()                    { *m = GetAllRequest{} }
func (m *GetAllRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllRequest) ProtoMessage()               {}
func (*GetAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetByIdRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetByIdRequest) Reset()                    { *m = GetByIdRequest{} }
func (m *GetByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetByIdRequest) ProtoMessage()               {}
func (*GetByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetByIdRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Doggo)(nil), "Doggo")
	proto.RegisterType((*GetAllRequest)(nil), "GetAllRequest")
	proto.RegisterType((*GetByIdRequest)(nil), "GetByIdRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DoggoService service

type DoggoServiceClient interface {
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Doggo, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (DoggoService_GetAllClient, error)
	Save(ctx context.Context, in *Doggo, opts ...grpc.CallOption) (*Doggo, error)
	SaveAll(ctx context.Context, opts ...grpc.CallOption) (DoggoService_SaveAllClient, error)
}

type doggoServiceClient struct {
	cc *grpc.ClientConn
}

func NewDoggoServiceClient(cc *grpc.ClientConn) DoggoServiceClient {
	return &doggoServiceClient{cc}
}

func (c *doggoServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Doggo, error) {
	out := new(Doggo)
	err := grpc.Invoke(ctx, "/DoggoService/GetById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doggoServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (DoggoService_GetAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DoggoService_serviceDesc.Streams[0], c.cc, "/DoggoService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &doggoServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DoggoService_GetAllClient interface {
	Recv() (*Doggo, error)
	grpc.ClientStream
}

type doggoServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *doggoServiceGetAllClient) Recv() (*Doggo, error) {
	m := new(Doggo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *doggoServiceClient) Save(ctx context.Context, in *Doggo, opts ...grpc.CallOption) (*Doggo, error) {
	out := new(Doggo)
	err := grpc.Invoke(ctx, "/DoggoService/Save", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doggoServiceClient) SaveAll(ctx context.Context, opts ...grpc.CallOption) (DoggoService_SaveAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DoggoService_serviceDesc.Streams[1], c.cc, "/DoggoService/SaveAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &doggoServiceSaveAllClient{stream}
	return x, nil
}

type DoggoService_SaveAllClient interface {
	Send(*Doggo) error
	Recv() (*Doggo, error)
	grpc.ClientStream
}

type doggoServiceSaveAllClient struct {
	grpc.ClientStream
}

func (x *doggoServiceSaveAllClient) Send(m *Doggo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *doggoServiceSaveAllClient) Recv() (*Doggo, error) {
	m := new(Doggo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DoggoService service

type DoggoServiceServer interface {
	GetById(context.Context, *GetByIdRequest) (*Doggo, error)
	GetAll(*GetAllRequest, DoggoService_GetAllServer) error
	Save(context.Context, *Doggo) (*Doggo, error)
	SaveAll(DoggoService_SaveAllServer) error
}

func RegisterDoggoServiceServer(s *grpc.Server, srv DoggoServiceServer) {
	s.RegisterService(&_DoggoService_serviceDesc, srv)
}

func _DoggoService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoggoServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DoggoService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoggoServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoggoService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DoggoServiceServer).GetAll(m, &doggoServiceGetAllServer{stream})
}

type DoggoService_GetAllServer interface {
	Send(*Doggo) error
	grpc.ServerStream
}

type doggoServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *doggoServiceGetAllServer) Send(m *Doggo) error {
	return x.ServerStream.SendMsg(m)
}

func _DoggoService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Doggo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoggoServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DoggoService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoggoServiceServer).Save(ctx, req.(*Doggo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoggoService_SaveAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DoggoServiceServer).SaveAll(&doggoServiceSaveAllServer{stream})
}

type DoggoService_SaveAllServer interface {
	Send(*Doggo) error
	Recv() (*Doggo, error)
	grpc.ServerStream
}

type doggoServiceSaveAllServer struct {
	grpc.ServerStream
}

func (x *doggoServiceSaveAllServer) Send(m *Doggo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *doggoServiceSaveAllServer) Recv() (*Doggo, error) {
	m := new(Doggo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DoggoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DoggoService",
	HandlerType: (*DoggoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _DoggoService_GetById_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _DoggoService_Save_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DoggoService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveAll",
			Handler:       _DoggoService_SaveAll_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/doggo.proto",
}

func init() { proto.RegisterFile("pb/doggo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x99, 0x98, 0xa4, 0x3a, 0x68, 0x2a, 0x83, 0x94, 0x20, 0x08, 0x61, 0x4f, 0x39, 0xa5,
	0x45, 0x9f, 0xc0, 0x22, 0x04, 0xaf, 0xe9, 0x49, 0x6f, 0x8d, 0x3b, 0x84, 0xc5, 0xea, 0xc6, 0xcd,
	0x1a, 0xf0, 0x21, 0x7c, 0x67, 0xc9, 0xee, 0x5a, 0x68, 0x6e, 0xfb, 0x7f, 0x3b, 0x1f, 0xff, 0x30,
	0x98, 0xf5, 0xed, 0x5a, 0xea, 0xae, 0xd3, 0x55, 0x6f, 0xb4, 0xd5, 0xe2, 0x05, 0x93, 0xa7, 0x29,
	0x52, 0x86, 0x91, 0x92, 0x39, 0x14, 0x50, 0x26, 0x4d, 0xa4, 0x24, 0x11, 0xc6, 0x9f, 0xfb, 0x0f,
	0xce, 0xa3, 0x02, 0xca, 0x8b, 0xc6, 0xbd, 0xe9, 0x06, 0x93, 0xd6, 0x30, 0xcb, 0xfc, 0xcc, 0x41,
	0x1f, 0x68, 0x85, 0xa9, 0x1a, 0x6a, 0xad, 0x65, 0x1e, 0x17, 0x50, 0x9e, 0x37, 0x21, 0x89, 0x25,
	0x5e, 0xd5, 0x6c, 0x1f, 0x0f, 0x87, 0x86, 0xbf, 0xbe, 0x79, 0xb0, 0xa2, 0xc0, 0xac, 0x66, 0xbb,
	0xfd, 0x79, 0x96, 0x81, 0xcc, 0x4b, 0xef, 0x7f, 0x01, 0x2f, 0xdd, 0x3a, 0x3b, 0x36, 0xa3, 0x7a,
	0x63, 0x12, 0xb8, 0x08, 0x0a, 0x2d, 0xab, 0x53, 0xf9, 0x36, 0xad, 0xfc, 0xe6, 0x02, 0x53, 0xdf,
	0x43, 0x59, 0x75, 0x52, 0xf8, 0x3f, 0xb1, 0x01, 0x5a, 0x61, 0xbc, 0xdb, 0x8f, 0x4c, 0x81, 0x1c,
	0xdd, 0x3b, 0x5c, 0x4c, 0x7c, 0x92, 0x67, 0x5f, 0x25, 0x6c, 0x60, 0x4b, 0xaf, 0xd7, 0xfd, 0x7b,
	0xe7, 0x0f, 0xb6, 0x1e, 0xd8, 0x8c, 0x6c, 0xda, 0xd4, 0x1d, 0xee, 0xe1, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0x80, 0x5f, 0x15, 0xb4, 0x4a, 0x01, 0x00, 0x00,
}
